plugins {
    id 'org.jetbrains.kotlin.plugin.serialization' version "$kotlin_version"
    id 'application'
    id 'maven-publish'
}
apply plugin: "org.jetbrains.kotlin.jvm"

group 'io.engenious.sift'
version '0.1-SNAPSHOT'

repositories {
    mavenCentral()
    google()
    maven { url "https://kotlin.bintray.com/kotlinx" }
    jcenter()
    maven { url "https://jitpack.io" }
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation("com.github.engeniousio.tongs:tongs-runner") {
        version {
            strictly("55d46e08ec74927811b876ee0a2f160f0b2967d2")
        }
    }
    implementation("com.github.engeniousio.tongs:tongs-common") {
        version {
            strictly("55d46e08ec74927811b876ee0a2f160f0b2967d2")
        }
    }
    implementation("com.github.engeniousio.tongs:tongs-plugin-api") {
        version {
            strictly("55d46e08ec74927811b876ee0a2f160f0b2967d2")
        }
    }
    implementation("com.github.engeniousio.tongs:tongs-plugin-android") {
        version {
            strictly("55d46e08ec74927811b876ee0a2f160f0b2967d2")
        }
    }
    implementation("com.android.tools.ddms:ddmlib:22.0") // greater version from the above plugin is actually used
    implementation "com.github.ajalt.clikt:clikt:3.0.1"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-core:1.0.1"
    implementation "org.http4k:http4k-client-okhttp:${http4kVersion}"
    implementation "org.http4k:http4k-core:${http4kVersion}"
    implementation "org.http4k:http4k-format-kotlinx-serialization:${http4kVersion}"
    implementation "org.http4k:http4k-jsonrpc:${http4kVersion}"
    implementation "org.http4k:http4k-multipart:${http4kVersion}"
    implementation "com.squareup.okhttp3:logging-interceptor:4.9.0" // TODO: same version as OkHttpClient
    implementation "org.jetbrains.kotlin:kotlin-reflect"
    implementation 'org.slf4j:slf4j-log4j12:1.7.30'
    testImplementation 'junit:junit:4.13.1'
}

compileKotlin {
    kotlinOptions.jvmTarget = "1.8"
    kotlinOptions.freeCompilerArgs = ["-Xopt-in=kotlin.RequiresOptIn", "-Xinline-classes"]
}
compileTestKotlin {
    kotlinOptions.jvmTarget = "1.8"
    kotlinOptions.freeCompilerArgs = ["-Xopt-in=kotlin.RequiresOptIn"]
}

application {
    applicationName = 'sift'
    mainClassName = "io.engenious.sift.MainCliKt"
}
run {
    workingDir = project.getProperties().getOrDefault("workingDir", project.projectDir)
}

if (System.getenv('JITPACK')) {
    publishing {
        publications {
            release(MavenPublication) {
                artifacts = distZip.outputs.files

                pom {
                    name = POM_NAME
                    description = POM_DESCRIPTION
                    url = POM_URL

                    licenses {
                        license {
                            name = POM_LICENCE_NAME
                            url = POM_LICENCE_URL
                        }
                    }

                    developers {
                        developer {
                            name = POM_DEVELOPER_NAME
                            email = POM_DEVELOPER_EMAIL
                            organization = POM_DEVELOPER_ORGANIZATION
                            organizationUrl = POM_DEVELOPER_ORGANIZATION_URL
                        }
                    }
                    scm {
                        connection = POM_SCM_CONNECTION
                        developerConnection = POM_SCM_DEVELOPER_CONNECTION
                        url = POM_SCM_URL
                    }
                }
            }
        }

        if (project.findProperty('signatory.keyId')) {
            signing {
                useGpgCmd()
                sign publishing.publications.release
            }
        }

        repositories {
            maven {
                name = 'MavenCentral'

                def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
                def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

                credentials {
                    username = System.getenv('MAVEN_USERNAME')
                    password = System.getenv('MAVEN_PASSWORD')
                }
            }
        }
    }
}