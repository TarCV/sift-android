import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'com.android.library'
    id 'maven-publish'
    id 'signing'
}
apply plugin: 'org.jetbrains.dokka'

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.2"

    defaultConfig {
        minSdkVersion 19
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
}

configurations {
    internalize
}

dependencies {
    internalize "com.github.engeniousio.tongs:tongs-ondevice:4c7b16e2256818e326e1aaa2df3c7cfa167ddf84:sources"

    compileOnly "androidx.test:core:$testVersion"

    //noinspection GradleDependency // match android-test dependency version
    compileOnly 'junit:junit:4.12'
}

afterEvaluate {
    task changePackage(type: Copy) {
        from(zipTree(project.configurations.internalize.resolve()[0])) {
            include '**/*.java'
            filter { line -> line.replace("com.github.tarcv.tongs", "io.engenious.sift") }
            eachFile {
                it.path = it.path.replace("com/github/tarcv/tongs", "io/engenious/sift")
            }
        }
        into "${project.buildDir}/unjar"
        includeEmptyDirs = false
    }
    tasks.javaPreCompileDebug.dependsOn(tasks.changePackage)
    tasks.javaPreCompileRelease.dependsOn(tasks.changePackage)
    android.sourceSets.main.java {
        srcDirs += tasks.changePackage.outputs.files.singleFile
    }

    task androidJavadocs(type: Javadoc) {
        source = android.sourceSets.main.java.srcDirs
        classpath = files("${android.sdkDirectory}/platforms/${android.compileSdkVersion}/android.jar")
        android.libraryVariants.all { variant ->
            if (variant.name == 'release') {
                owner.classpath += variant.javaCompileProvider.get().classpath
            }
        }
        exclude '**/R.html', '**/R.*.html', '**/index.html'
    }

    task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
        archiveClassifier.set('javadoc')
        from androidJavadocs.destinationDir
    }

    task sourcesJar(type: Jar) {
        classifier = 'sources'
        from android.sourceSets.main.java.sourceFiles
    }

    publishing {
        publications {
            release(MavenPublication) {
                from components.release
                artifacts += sourcesJar
                artifacts += androidJavadocsJar

                pom {
                    name = POM_NAME
                    description = POM_DESCRIPTION
                    url = POM_URL

                    licenses {
                        license {
                            name = POM_LICENCE_NAME
                            url = POM_LICENCE_URL
                        }
                    }

                    developers {
                        developer {
                            name = POM_DEVELOPER_NAME
                            email = POM_DEVELOPER_EMAIL
                            organization = POM_DEVELOPER_ORGANIZATION
                            organizationUrl = POM_DEVELOPER_ORGANIZATION_URL
                        }
                    }
                    scm {
                        connection = POM_SCM_CONNECTION
                        developerConnection = POM_SCM_DEVELOPER_CONNECTION
                        url = POM_SCM_URL
                    }
                }
            }
        }

        signing {
            useGpgCmd()
            sign publishing.publications.release
        }

        repositories {
            maven {
                name = 'MavenCentral'

                def releasesRepoUrl = 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
                def snapshotsRepoUrl = 'https://s01.oss.sonatype.org/content/repositories/snapshots/'
                url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl

                credentials {
                    username = System.getenv('MAVEN_USERNAME')
                    password = System.getenv('MAVEN_PASSWORD')
                }
            }
        }
    }
}
